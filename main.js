(()=>{"use strict";var __webpack_modules__={147:()=>{eval('{\n;// ./src/models/Project.js\nclass Project {\n\tconstructor(title) {\n\t\tthis.title = title; \n\t\tthis.TaskList = []; \n\t}\n\n\taddTask(task) {\n\t\tthis.TaskList.push(task); \n\t}\n\tdeleteTask(idx) {\n\t\tthis.TaskList.splice(idx, 1); \n\t}\n}\n\n;// ./src/models/Task.js\nclass Task {\n\tconstructor(title, details, priority, timeInput) {\n\t\tthis.title = title; \n\t\tthis.details = details; \n\t\tthis.priority = priority; \n\t\tthis.time = timeInput ? new Date(timeInput) : null; \n\t\tthis.completed = false; \n\t}\n\n\tgetDate() {\n\t\tif (!this.time) return "";\n\t\tconst day = this.time.getDate(); \n\t\tconst month = this.time.getMonth(); \n\t\tconst year = this.time.getFullYear(); \n\t\tconst hours = String(this.time.getHours()).padStart(2, "0"); \n\t\tconst minutes = String(this.time.getMinutes()).padStart(2, "0"); \n\n\t\treturn `${day} ${month} ${year}, ${hours}:${minutes}`\n\t}\n}\n\n;// ./node_modules/date-fns/constants.js\n/**\n * @module constants\n * @summary Useful constants\n * @description\n * Collection of useful date constants.\n *\n * The constants could be imported from `date-fns/constants`:\n *\n * ```ts\n * import { maxTime, minTime } from "./constants/date-fns/constants";\n *\n * function isAllowedTime(time) {\n *   return time <= maxTime && time >= minTime;\n * }\n * ```\n */\n\n/**\n * @constant\n * @name daysInWeek\n * @summary Days in 1 week.\n */\nconst daysInWeek = 7;\n\n/**\n * @constant\n * @name daysInYear\n * @summary Days in 1 year.\n *\n * @description\n * How many days in a year.\n *\n * One years equals 365.2425 days according to the formula:\n *\n * > Leap year occurs every 4 years, except for years that are divisible by 100 and not divisible by 400.\n * > 1 mean year = (365+1/4-1/100+1/400) days = 365.2425 days\n */\nconst daysInYear = 365.2425;\n\n/**\n * @constant\n * @name maxTime\n * @summary Maximum allowed time.\n *\n * @example\n * import { maxTime } from "./constants/date-fns/constants";\n *\n * const isValid = 8640000000000001 <= maxTime;\n * //=> false\n *\n * new Date(8640000000000001);\n * //=> Invalid Date\n */\nconst maxTime = Math.pow(10, 8) * 24 * 60 * 60 * 1000;\n\n/**\n * @constant\n * @name minTime\n * @summary Minimum allowed time.\n *\n * @example\n * import { minTime } from "./constants/date-fns/constants";\n *\n * const isValid = -8640000000000001 >= minTime;\n * //=> false\n *\n * new Date(-8640000000000001)\n * //=> Invalid Date\n */\nconst minTime = -maxTime;\n\n/**\n * @constant\n * @name millisecondsInWeek\n * @summary Milliseconds in 1 week.\n */\nconst millisecondsInWeek = 604800000;\n\n/**\n * @constant\n * @name millisecondsInDay\n * @summary Milliseconds in 1 day.\n */\nconst millisecondsInDay = 86400000;\n\n/**\n * @constant\n * @name millisecondsInMinute\n * @summary Milliseconds in 1 minute\n */\nconst millisecondsInMinute = 60000;\n\n/**\n * @constant\n * @name millisecondsInHour\n * @summary Milliseconds in 1 hour\n */\nconst millisecondsInHour = 3600000;\n\n/**\n * @constant\n * @name millisecondsInSecond\n * @summary Milliseconds in 1 second\n */\nconst millisecondsInSecond = 1000;\n\n/**\n * @constant\n * @name minutesInYear\n * @summary Minutes in 1 year.\n */\nconst minutesInYear = 525600;\n\n/**\n * @constant\n * @name minutesInMonth\n * @summary Minutes in 1 month.\n */\nconst minutesInMonth = 43200;\n\n/**\n * @constant\n * @name minutesInDay\n * @summary Minutes in 1 day.\n */\nconst minutesInDay = 1440;\n\n/**\n * @constant\n * @name minutesInHour\n * @summary Minutes in 1 hour.\n */\nconst minutesInHour = 60;\n\n/**\n * @constant\n * @name monthsInQuarter\n * @summary Months in 1 quarter.\n */\nconst monthsInQuarter = 3;\n\n/**\n * @constant\n * @name monthsInYear\n * @summary Months in 1 year.\n */\nconst monthsInYear = 12;\n\n/**\n * @constant\n * @name quartersInYear\n * @summary Quarters in 1 year\n */\nconst quartersInYear = 4;\n\n/**\n * @constant\n * @name secondsInHour\n * @summary Seconds in 1 hour.\n */\nconst secondsInHour = 3600;\n\n/**\n * @constant\n * @name secondsInMinute\n * @summary Seconds in 1 minute.\n */\nconst secondsInMinute = 60;\n\n/**\n * @constant\n * @name secondsInDay\n * @summary Seconds in 1 day.\n */\nconst secondsInDay = secondsInHour * 24;\n\n/**\n * @constant\n * @name secondsInWeek\n * @summary Seconds in 1 week.\n */\nconst secondsInWeek = secondsInDay * 7;\n\n/**\n * @constant\n * @name secondsInYear\n * @summary Seconds in 1 year.\n */\nconst secondsInYear = secondsInDay * daysInYear;\n\n/**\n * @constant\n * @name secondsInMonth\n * @summary Seconds in 1 month\n */\nconst secondsInMonth = secondsInYear / 12;\n\n/**\n * @constant\n * @name secondsInQuarter\n * @summary Seconds in 1 quarter.\n */\nconst secondsInQuarter = secondsInMonth * 3;\n\n/**\n * @constant\n * @name constructFromSymbol\n * @summary Symbol enabling Date extensions to inherit properties from the reference date.\n *\n * The symbol is used to enable the `constructFrom` function to construct a date\n * using a reference date and a value. It allows to transfer extra properties\n * from the reference date to the new date. It\'s useful for extensions like\n * [`TZDate`](https://github.com/date-fns/tz) that accept a time zone as\n * a constructor argument.\n */\nconst constructFromSymbol = Symbol.for("constructDateFrom");\n\n;// ./node_modules/date-fns/constructFrom.js\n\n\n/**\n * @name constructFrom\n * @category Generic Helpers\n * @summary Constructs a date using the reference date and the value\n *\n * @description\n * The function constructs a new date using the constructor from the reference\n * date and the given value. It helps to build generic functions that accept\n * date extensions.\n *\n * It defaults to `Date` if the passed reference date is a number or a string.\n *\n * Starting from v3.7.0, it allows to construct a date using `[Symbol.for("constructDateFrom")]`\n * enabling to transfer extra properties from the reference date to the new date.\n * It\'s useful for extensions like [`TZDate`](https://github.com/date-fns/tz)\n * that accept a time zone as a constructor argument.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The reference date to take constructor from\n * @param value - The value to create the date\n *\n * @returns Date initialized using the given date and value\n *\n * @example\n * import { constructFrom } from "./constructFrom/date-fns";\n *\n * // A function that clones a date preserving the original type\n * function cloneDate<DateType extends Date>(date: DateType): DateType {\n *   return constructFrom(\n *     date, // Use constructor from the given date\n *     date.getTime() // Use the date value to create a new date\n *   );\n * }\n */\nfunction constructFrom(date, value) {\n  if (typeof date === "function") return date(value);\n\n  if (date && typeof date === "object" && constructFromSymbol in date)\n    return date[constructFromSymbol](value);\n\n  if (date instanceof Date) return new date.constructor(value);\n\n  return new Date(value);\n}\n\n// Fallback for modularized imports:\n/* harmony default export */ const date_fns_constructFrom = ((/* unused pure expression or super */ null && (constructFrom)));\n\n;// ./node_modules/date-fns/constructNow.js\n\n\n/**\n * @name constructNow\n * @category Generic Helpers\n * @summary Constructs a new current date using the passed value constructor.\n * @pure false\n *\n * @description\n * The function constructs a new current date using the constructor from\n * the reference date. It helps to build generic functions that accept date\n * extensions and use the current date.\n *\n * It defaults to `Date` if the passed reference date is a number or a string.\n *\n * @param date - The reference date to take constructor from\n *\n * @returns Current date initialized using the given date constructor\n *\n * @example\n * import { constructNow, isSameDay } from \'date-fns\'\n *\n * function isToday<DateType extends Date>(\n *   date: DateArg<DateType>,\n * ): boolean {\n *   // If we were to use `new Date()` directly, the function would  behave\n *   // differently in different timezones and return false for the same date.\n *   return isSameDay(date, constructNow(date));\n * }\n */\nfunction constructNow(date) {\n  return constructFrom(date, Date.now());\n}\n\n// Fallback for modularized imports:\n/* harmony default export */ const date_fns_constructNow = ((/* unused pure expression or super */ null && (constructNow)));\n\n;// ./node_modules/date-fns/locale/en-US/_lib/formatDistance.js\nconst formatDistanceLocale = {\n  lessThanXSeconds: {\n    one: "less than a second",\n    other: "less than {{count}} seconds",\n  },\n\n  xSeconds: {\n    one: "1 second",\n    other: "{{count}} seconds",\n  },\n\n  halfAMinute: "half a minute",\n\n  lessThanXMinutes: {\n    one: "less than a minute",\n    other: "less than {{count}} minutes",\n  },\n\n  xMinutes: {\n    one: "1 minute",\n    other: "{{count}} minutes",\n  },\n\n  aboutXHours: {\n    one: "about 1 hour",\n    other: "about {{count}} hours",\n  },\n\n  xHours: {\n    one: "1 hour",\n    other: "{{count}} hours",\n  },\n\n  xDays: {\n    one: "1 day",\n    other: "{{count}} days",\n  },\n\n  aboutXWeeks: {\n    one: "about 1 week",\n    other: "about {{count}} weeks",\n  },\n\n  xWeeks: {\n    one: "1 week",\n    other: "{{count}} weeks",\n  },\n\n  aboutXMonths: {\n    one: "about 1 month",\n    other: "about {{count}} months",\n  },\n\n  xMonths: {\n    one: "1 month",\n    other: "{{count}} months",\n  },\n\n  aboutXYears: {\n    one: "about 1 year",\n    other: "about {{count}} years",\n  },\n\n  xYears: {\n    one: "1 year",\n    other: "{{count}} years",\n  },\n\n  overXYears: {\n    one: "over 1 year",\n    other: "over {{count}} years",\n  },\n\n  almostXYears: {\n    one: "almost 1 year",\n    other: "almost {{count}} years",\n  },\n};\n\nconst formatDistance = (token, count, options) => {\n  let result;\n\n  const tokenValue = formatDistanceLocale[token];\n  if (typeof tokenValue === "string") {\n    result = tokenValue;\n  } else if (count === 1) {\n    result = tokenValue.one;\n  } else {\n    result = tokenValue.other.replace("{{count}}", count.toString());\n  }\n\n  if (options?.addSuffix) {\n    if (options.comparison && options.comparison > 0) {\n      return "in " + result;\n    } else {\n      return result + " ago";\n    }\n  }\n\n  return result;\n};\n\n;// ./node_modules/date-fns/locale/_lib/buildFormatLongFn.js\nfunction buildFormatLongFn(args) {\n  return (options = {}) => {\n    // TODO: Remove String()\n    const width = options.width ? String(options.width) : args.defaultWidth;\n    const format = args.formats[width] || args.formats[args.defaultWidth];\n    return format;\n  };\n}\n\n;// ./node_modules/date-fns/locale/en-US/_lib/formatLong.js\n\n\nconst dateFormats = {\n  full: "EEEE, MMMM do, y",\n  long: "MMMM do, y",\n  medium: "MMM d, y",\n  short: "MM/dd/yyyy",\n};\n\nconst timeFormats = {\n  full: "h:mm:ss a zzzz",\n  long: "h:mm:ss a z",\n  medium: "h:mm:ss a",\n  short: "h:mm a",\n};\n\nconst dateTimeFormats = {\n  full: "{{date}} \'at\' {{time}}",\n  long: "{{date}} \'at\' {{time}}",\n  medium: "{{date}}, {{time}}",\n  short: "{{date}}, {{time}}",\n};\n\nconst formatLong = {\n  date: buildFormatLongFn({\n    formats: dateFormats,\n    defaultWidth: "full",\n  }),\n\n  time: buildFormatLongFn({\n    formats: timeFormats,\n    defaultWidth: "full",\n  }),\n\n  dateTime: buildFormatLongFn({\n    formats: dateTimeFormats,\n    defaultWidth: "full",\n  }),\n};\n\n;// ./node_modules/date-fns/locale/en-US/_lib/formatRelative.js\nconst formatRelativeLocale = {\n  lastWeek: "\'last\' eeee \'at\' p",\n  yesterday: "\'yesterday at\' p",\n  today: "\'today at\' p",\n  tomorrow: "\'tomorrow at\' p",\n  nextWeek: "eeee \'at\' p",\n  other: "P",\n};\n\nconst formatRelative = (token, _date, _baseDate, _options) =>\n  formatRelativeLocale[token];\n\n;// ./node_modules/date-fns/locale/_lib/buildLocalizeFn.js\n/**\n * The localize function argument callback which allows to convert raw value to\n * the actual type.\n *\n * @param value - The value to convert\n *\n * @returns The converted value\n */\n\n/**\n * The map of localized values for each width.\n */\n\n/**\n * The index type of the locale unit value. It types conversion of units of\n * values that don\'t start at 0 (i.e. quarters).\n */\n\n/**\n * Converts the unit value to the tuple of values.\n */\n\n/**\n * The tuple of localized era values. The first element represents BC,\n * the second element represents AD.\n */\n\n/**\n * The tuple of localized quarter values. The first element represents Q1.\n */\n\n/**\n * The tuple of localized day values. The first element represents Sunday.\n */\n\n/**\n * The tuple of localized month values. The first element represents January.\n */\n\nfunction buildLocalizeFn(args) {\n  return (value, options) => {\n    const context = options?.context ? String(options.context) : "standalone";\n\n    let valuesArray;\n    if (context === "formatting" && args.formattingValues) {\n      const defaultWidth = args.defaultFormattingWidth || args.defaultWidth;\n      const width = options?.width ? String(options.width) : defaultWidth;\n\n      valuesArray =\n        args.formattingValues[width] || args.formattingValues[defaultWidth];\n    } else {\n      const defaultWidth = args.defaultWidth;\n      const width = options?.width ? String(options.width) : args.defaultWidth;\n\n      valuesArray = args.values[width] || args.values[defaultWidth];\n    }\n    const index = args.argumentCallback ? args.argumentCallback(value) : value;\n\n    // @ts-expect-error - For some reason TypeScript just don\'t want to match it, no matter how hard we try. I challenge you to try to remove it!\n    return valuesArray[index];\n  };\n}\n\n;// ./node_modules/date-fns/locale/en-US/_lib/localize.js\n\n\nconst eraValues = {\n  narrow: ["B", "A"],\n  abbreviated: ["BC", "AD"],\n  wide: ["Before Christ", "Anno Domini"],\n};\n\nconst quarterValues = {\n  narrow: ["1", "2", "3", "4"],\n  abbreviated: ["Q1", "Q2", "Q3", "Q4"],\n  wide: ["1st quarter", "2nd quarter", "3rd quarter", "4th quarter"],\n};\n\n// Note: in English, the names of days of the week and months are capitalized.\n// If you are making a new locale based on this one, check if the same is true for the language you\'re working on.\n// Generally, formatted dates should look like they are in the middle of a sentence,\n// e.g. in Spanish language the weekdays and months should be in the lowercase.\nconst monthValues = {\n  narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],\n  abbreviated: [\n    "Jan",\n    "Feb",\n    "Mar",\n    "Apr",\n    "May",\n    "Jun",\n    "Jul",\n    "Aug",\n    "Sep",\n    "Oct",\n    "Nov",\n    "Dec",\n  ],\n\n  wide: [\n    "January",\n    "February",\n    "March",\n    "April",\n    "May",\n    "June",\n    "July",\n    "August",\n    "September",\n    "October",\n    "November",\n    "December",\n  ],\n};\n\nconst dayValues = {\n  narrow: ["S", "M", "T", "W", "T", "F", "S"],\n  short: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],\n  abbreviated: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],\n  wide: [\n    "Sunday",\n    "Monday",\n    "Tuesday",\n    "Wednesday",\n    "Thursday",\n    "Friday",\n    "Saturday",\n  ],\n};\n\nconst dayPeriodValues = {\n  narrow: {\n    am: "a",\n    pm: "p",\n    midnight: "mi",\n    noon: "n",\n    morning: "morning",\n    afternoon: "afternoon",\n    evening: "evening",\n    night: "night",\n  },\n  abbreviated: {\n    am: "AM",\n    pm: "PM",\n    midnight: "midnight",\n    noon: "noon",\n    morning: "morning",\n    afternoon: "afternoon",\n    evening: "evening",\n    night: "night",\n  },\n  wide: {\n    am: "a.m.",\n    pm: "p.m.",\n    midnight: "midnight",\n    noon: "noon",\n    morning: "morning",\n    afternoon: "afternoon",\n    evening: "evening",\n    night: "night",\n  },\n};\n\nconst formattingDayPeriodValues = {\n  narrow: {\n    am: "a",\n    pm: "p",\n    midnight: "mi",\n    noon: "n",\n    morning: "in the morning",\n    afternoon: "in the afternoon",\n    evening: "in the evening",\n    night: "at night",\n  },\n  abbreviated: {\n    am: "AM",\n    pm: "PM",\n    midnight: "midnight",\n    noon: "noon",\n    morning: "in the morning",\n    afternoon: "in the afternoon",\n    evening: "in the evening",\n    night: "at night",\n  },\n  wide: {\n    am: "a.m.",\n    pm: "p.m.",\n    midnight: "midnight",\n    noon: "noon",\n    morning: "in the morning",\n    afternoon: "in the afternoon",\n    evening: "in the evening",\n    night: "at night",\n  },\n};\n\nconst ordinalNumber = (dirtyNumber, _options) => {\n  const number = Number(dirtyNumber);\n\n  // If ordinal numbers depend on context, for example,\n  // if they are different for different grammatical genders,\n  // use `options.unit`.\n  //\n  // `unit` can be \'year\', \'quarter\', \'month\', \'week\', \'date\', \'dayOfYear\',\n  // \'day\', \'hour\', \'minute\', \'second\'.\n\n  const rem100 = number % 100;\n  if (rem100 > 20 || rem100 < 10) {\n    switch (rem100 % 10) {\n      case 1:\n        return number + "st";\n      case 2:\n        return number + "nd";\n      case 3:\n        return number + "rd";\n    }\n  }\n  return number + "th";\n};\n\nconst localize = {\n  ordinalNumber,\n\n  era: buildLocalizeFn({\n    values: eraValues,\n    defaultWidth: "wide",\n  }),\n\n  quarter: buildLocalizeFn({\n    values: quarterValues,\n    defaultWidth: "wide",\n    argumentCallback: (quarter) => quarter - 1,\n  }),\n\n  month: buildLocalizeFn({\n    values: monthValues,\n    defaultWidth: "wide",\n  }),\n\n  day: buildLocalizeFn({\n    values: dayValues,\n    defaultWidth: "wide",\n  }),\n\n  dayPeriod: buildLocalizeFn({\n    values: dayPeriodValues,\n    defaultWidth: "wide",\n    formattingValues: formattingDayPeriodValues,\n    defaultFormattingWidth: "wide",\n  }),\n};\n\n;// ./node_modules/date-fns/locale/_lib/buildMatchFn.js\nfunction buildMatchFn(args) {\n  return (string, options = {}) => {\n    const width = options.width;\n\n    const matchPattern =\n      (width && args.matchPatterns[width]) ||\n      args.matchPatterns[args.defaultMatchWidth];\n    const matchResult = string.match(matchPattern);\n\n    if (!matchResult) {\n      return null;\n    }\n    const matchedString = matchResult[0];\n\n    const parsePatterns =\n      (width && args.parsePatterns[width]) ||\n      args.parsePatterns[args.defaultParseWidth];\n\n    const key = Array.isArray(parsePatterns)\n      ? findIndex(parsePatterns, (pattern) => pattern.test(matchedString))\n      : // [TODO] -- I challenge you to fix the type\n        findKey(parsePatterns, (pattern) => pattern.test(matchedString));\n\n    let value;\n\n    value = args.valueCallback ? args.valueCallback(key) : key;\n    value = options.valueCallback\n      ? // [TODO] -- I challenge you to fix the type\n        options.valueCallback(value)\n      : value;\n\n    const rest = string.slice(matchedString.length);\n\n    return { value, rest };\n  };\n}\n\nfunction findKey(object, predicate) {\n  for (const key in object) {\n    if (\n      Object.prototype.hasOwnProperty.call(object, key) &&\n      predicate(object[key])\n    ) {\n      return key;\n    }\n  }\n  return undefined;\n}\n\nfunction findIndex(array, predicate) {\n  for (let key = 0; key < array.length; key++) {\n    if (predicate(array[key])) {\n      return key;\n    }\n  }\n  return undefined;\n}\n\n;// ./node_modules/date-fns/locale/_lib/buildMatchPatternFn.js\nfunction buildMatchPatternFn(args) {\n  return (string, options = {}) => {\n    const matchResult = string.match(args.matchPattern);\n    if (!matchResult) return null;\n    const matchedString = matchResult[0];\n\n    const parseResult = string.match(args.parsePattern);\n    if (!parseResult) return null;\n    let value = args.valueCallback\n      ? args.valueCallback(parseResult[0])\n      : parseResult[0];\n\n    // [TODO] I challenge you to fix the type\n    value = options.valueCallback ? options.valueCallback(value) : value;\n\n    const rest = string.slice(matchedString.length);\n\n    return { value, rest };\n  };\n}\n\n;// ./node_modules/date-fns/locale/en-US/_lib/match.js\n\n\n\nconst matchOrdinalNumberPattern = /^(\\d+)(th|st|nd|rd)?/i;\nconst parseOrdinalNumberPattern = /\\d+/i;\n\nconst matchEraPatterns = {\n  narrow: /^(b|a)/i,\n  abbreviated: /^(b\\.?\\s?c\\.?|b\\.?\\s?c\\.?\\s?e\\.?|a\\.?\\s?d\\.?|c\\.?\\s?e\\.?)/i,\n  wide: /^(before christ|before common era|anno domini|common era)/i,\n};\nconst parseEraPatterns = {\n  any: [/^b/i, /^(a|c)/i],\n};\n\nconst matchQuarterPatterns = {\n  narrow: /^[1234]/i,\n  abbreviated: /^q[1234]/i,\n  wide: /^[1234](th|st|nd|rd)? quarter/i,\n};\nconst parseQuarterPatterns = {\n  any: [/1/i, /2/i, /3/i, /4/i],\n};\n\nconst matchMonthPatterns = {\n  narrow: /^[jfmasond]/i,\n  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,\n  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i,\n};\nconst parseMonthPatterns = {\n  narrow: [\n    /^j/i,\n    /^f/i,\n    /^m/i,\n    /^a/i,\n    /^m/i,\n    /^j/i,\n    /^j/i,\n    /^a/i,\n    /^s/i,\n    /^o/i,\n    /^n/i,\n    /^d/i,\n  ],\n\n  any: [\n    /^ja/i,\n    /^f/i,\n    /^mar/i,\n    /^ap/i,\n    /^may/i,\n    /^jun/i,\n    /^jul/i,\n    /^au/i,\n    /^s/i,\n    /^o/i,\n    /^n/i,\n    /^d/i,\n  ],\n};\n\nconst matchDayPatterns = {\n  narrow: /^[smtwf]/i,\n  short: /^(su|mo|tu|we|th|fr|sa)/i,\n  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,\n  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i,\n};\nconst parseDayPatterns = {\n  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],\n  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i],\n};\n\nconst matchDayPeriodPatterns = {\n  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,\n  any: /^([ap]\\.?\\s?m\\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i,\n};\nconst parseDayPeriodPatterns = {\n  any: {\n    am: /^a/i,\n    pm: /^p/i,\n    midnight: /^mi/i,\n    noon: /^no/i,\n    morning: /morning/i,\n    afternoon: /afternoon/i,\n    evening: /evening/i,\n    night: /night/i,\n  },\n};\n\nconst match = {\n  ordinalNumber: buildMatchPatternFn({\n    matchPattern: matchOrdinalNumberPattern,\n    parsePattern: parseOrdinalNumberPattern,\n    valueCallback: (value) => parseInt(value, 10),\n  }),\n\n  era: buildMatchFn({\n    matchPatterns: matchEraPatterns,\n    defaultMatchWidth: "wide",\n    parsePatterns: parseEraPatterns,\n    defaultParseWidth: "any",\n  }),\n\n  quarter: buildMatchFn({\n    matchPatterns: matchQuarterPatterns,\n    defaultMatchWidth: "wide",\n    parsePatterns: parseQuarterPatterns,\n    defaultParseWidth: "any",\n    valueCallback: (index) => index + 1,\n  }),\n\n  month: buildMatchFn({\n    matchPatterns: matchMonthPatterns,\n    defaultMatchWidth: "wide",\n    parsePatterns: parseMonthPatterns,\n    defaultParseWidth: "any",\n  }),\n\n  day: buildMatchFn({\n    matchPatterns: matchDayPatterns,\n    defaultMatchWidth: "wide",\n    parsePatterns: parseDayPatterns,\n    defaultParseWidth: "any",\n  }),\n\n  dayPeriod: buildMatchFn({\n    matchPatterns: matchDayPeriodPatterns,\n    defaultMatchWidth: "any",\n    parsePatterns: parseDayPeriodPatterns,\n    defaultParseWidth: "any",\n  }),\n};\n\n;// ./node_modules/date-fns/locale/en-US.js\n\n\n\n\n\n\n/**\n * @category Locales\n * @summary English locale (United States).\n * @language English\n * @iso-639-2 eng\n * @author Sasha Koss [@kossnocorp](https://github.com/kossnocorp)\n * @author Lesha Koss [@leshakoss](https://github.com/leshakoss)\n */\nconst enUS = {\n  code: "en-US",\n  formatDistance: formatDistance,\n  formatLong: formatLong,\n  formatRelative: formatRelative,\n  localize: localize,\n  match: match,\n  options: {\n    weekStartsOn: 0 /* Sunday */,\n    firstWeekContainsDate: 1,\n  },\n};\n\n// Fallback for modularized imports:\n/* harmony default export */ const en_US = ((/* unused pure expression or super */ null && (enUS)));\n\n;// ./node_modules/date-fns/_lib/defaultOptions.js\nlet defaultOptions = {};\n\nfunction getDefaultOptions() {\n  return defaultOptions;\n}\n\nfunction setDefaultOptions(newOptions) {\n  defaultOptions = newOptions;\n}\n\n;// ./node_modules/date-fns/_lib/getRoundingMethod.js\nfunction getRoundingMethod(method) {\n  return (number) => {\n    const round = method ? Math[method] : Math.trunc;\n    const result = round(number);\n    // Prevent negative zero\n    return result === 0 ? 0 : result;\n  };\n}\n\n;// ./node_modules/date-fns/toDate.js\n\n\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * Starting from v3.7.0, it clones a date using `[Symbol.for("constructDateFrom")]`\n * enabling to transfer extra properties from the reference date to the new date.\n * It\'s useful for extensions like [`TZDate`](https://github.com/date-fns/tz)\n * that accept a time zone as a constructor argument.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param argument - The value to convert\n *\n * @returns The parsed date in the local time zone\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\nfunction toDate(argument, context) {\n  // [TODO] Get rid of `toDate` or `constructFrom`?\n  return constructFrom(context || argument, argument);\n}\n\n// Fallback for modularized imports:\n/* harmony default export */ const date_fns_toDate = ((/* unused pure expression or super */ null && (toDate)));\n\n;// ./node_modules/date-fns/_lib/getTimezoneOffsetInMilliseconds.js\n\n\n/**\n * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.\n * They usually appear for dates that denote time before the timezones were introduced\n * (e.g. for \'Europe/Prague\' timezone the offset is GMT+00:57:44 before 1 October 1891\n * and GMT+01:00:00 after that date)\n *\n * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,\n * which would lead to incorrect calculations.\n *\n * This function returns the timezone offset in milliseconds that takes seconds in account.\n */\nfunction getTimezoneOffsetInMilliseconds(date) {\n  const _date = toDate(date);\n  const utcDate = new Date(\n    Date.UTC(\n      _date.getFullYear(),\n      _date.getMonth(),\n      _date.getDate(),\n      _date.getHours(),\n      _date.getMinutes(),\n      _date.getSeconds(),\n      _date.getMilliseconds(),\n    ),\n  );\n  utcDate.setUTCFullYear(_date.getFullYear());\n  return +date - +utcDate;\n}\n\n;// ./node_modules/date-fns/_lib/normalizeDates.js\n\n\nfunction normalizeDates(context, ...dates) {\n  const normalize = constructFrom.bind(\n    null,\n    context || dates.find((date) => typeof date === "object"),\n  );\n  return dates.map(normalize);\n}\n\n;// ./node_modules/date-fns/compareAsc.js\n\n\n/**\n * @name compareAsc\n * @category Common Helpers\n * @summary Compare the two dates and return -1, 0 or 1.\n *\n * @description\n * Compare the two dates and return 1 if the first date is after the second,\n * -1 if the first date is before the second or 0 if dates are equal.\n *\n * @param dateLeft - The first date to compare\n * @param dateRight - The second date to compare\n *\n * @returns The result of the comparison\n *\n * @example\n * // Compare 11 February 1987 and 10 July 1989:\n * const result = compareAsc(new Date(1987, 1, 11), new Date(1989, 6, 10))\n * //=> -1\n *\n * @example\n * // Sort the array of dates:\n * const result = [\n *   new Date(1995, 6, 2),\n *   new Date(1987, 1, 11),\n *   new Date(1989, 6, 10)\n * ].sort(compareAsc)\n * //=> [\n * //   Wed Feb 11 1987 00:00:00,\n * //   Mon Jul 10 1989 00:00:00,\n * //   Sun Jul 02 1995 00:00:00\n * // ]\n */\nfunction compareAsc(dateLeft, dateRight) {\n  const diff = +toDate(dateLeft) - +toDate(dateRight);\n\n  if (diff < 0) return -1;\n  else if (diff > 0) return 1;\n\n  // Return 0 if diff is 0; return NaN if diff is NaN\n  return diff;\n}\n\n// Fallback for modularized imports:\n/* harmony default export */ const date_fns_compareAsc = ((/* unused pure expression or super */ null && (compareAsc)));\n\n;// ./node_modules/date-fns/formatDistanceStrict.js\n\n\n\n\n\n\n\n\n/**\n * The {@link formatDistanceStrict} function options.\n */\n\n/**\n * The unit used to format the distance in {@link formatDistanceStrict}.\n */\n\n/**\n * @name formatDistanceStrict\n * @category Common Helpers\n * @summary Return the distance between the given dates in words.\n *\n * @description\n * Return the distance between the given dates in words, using strict units.\n * This is like `formatDistance`, but does not use helpers like \'almost\', \'over\',\n * \'less than\' and the like.\n *\n * | Distance between dates | Result              |\n * |------------------------|---------------------|\n * | 0 ... 59 secs          | [0..59] seconds     |\n * | 1 ... 59 mins          | [1..59] minutes     |\n * | 1 ... 23 hrs           | [1..23] hours       |\n * | 1 ... 29 days          | [1..29] days        |\n * | 1 ... 11 months        | [1..11] months      |\n * | 1 ... N years          | [1..N]  years       |\n *\n * @param laterDate - The date\n * @param earlierDate - The date to compare with\n * @param options - An object with options\n *\n * @returns The distance in words\n *\n * @throws `date` must not be Invalid Date\n * @throws `baseDate` must not be Invalid Date\n * @throws `options.unit` must be \'second\', \'minute\', \'hour\', \'day\', \'month\' or \'year\'\n * @throws `options.locale` must contain `formatDistance` property\n *\n * @example\n * // What is the distance between 2 July 2014 and 1 January 2015?\n * const result = formatDistanceStrict(new Date(2014, 6, 2), new Date(2015, 0, 2))\n * //=> \'6 months\'\n *\n * @example\n * // What is the distance between 1 January 2015 00:00:15\n * // and 1 January 2015 00:00:00?\n * const result = formatDistanceStrict(\n *   new Date(2015, 0, 1, 0, 0, 15),\n *   new Date(2015, 0, 1, 0, 0, 0)\n * )\n * //=> \'15 seconds\'\n *\n * @example\n * // What is the distance from 1 January 2016\n * // to 1 January 2015, with a suffix?\n * const result = formatDistanceStrict(new Date(2015, 0, 1), new Date(2016, 0, 1), {\n *   addSuffix: true\n * })\n * //=> \'1 year ago\'\n *\n * @example\n * // What is the distance from 1 January 2016\n * // to 1 January 2015, in minutes?\n * const result = formatDistanceStrict(new Date(2016, 0, 1), new Date(2015, 0, 1), {\n *   unit: \'minute\'\n * })\n * //=> \'525600 minutes\'\n *\n * @example\n * // What is the distance from 1 January 2015\n * // to 28 January 2015, in months, rounded up?\n * const result = formatDistanceStrict(new Date(2015, 0, 28), new Date(2015, 0, 1), {\n *   unit: \'month\',\n *   roundingMethod: \'ceil\'\n * })\n * //=> \'1 month\'\n *\n * @example\n * // What is the distance between 1 August 2016 and 1 January 2015 in Esperanto?\n * import { eoLocale } from \'date-fns/locale/eo\'\n * const result = formatDistanceStrict(new Date(2016, 7, 1), new Date(2015, 0, 1), {\n *   locale: eoLocale\n * })\n * //=> \'1 jaro\'\n */\n\nfunction formatDistanceStrict(laterDate, earlierDate, options) {\n  const defaultOptions = getDefaultOptions();\n  const locale = options?.locale ?? defaultOptions.locale ?? enUS;\n\n  const comparison = compareAsc(laterDate, earlierDate);\n\n  if (isNaN(comparison)) {\n    throw new RangeError("Invalid time value");\n  }\n\n  const localizeOptions = Object.assign({}, options, {\n    addSuffix: options?.addSuffix,\n    comparison: comparison,\n  });\n\n  const [laterDate_, earlierDate_] = normalizeDates(\n    options?.in,\n    ...(comparison > 0 ? [earlierDate, laterDate] : [laterDate, earlierDate]),\n  );\n\n  const roundingMethod = getRoundingMethod(options?.roundingMethod ?? "round");\n\n  const milliseconds = earlierDate_.getTime() - laterDate_.getTime();\n  const minutes = milliseconds / millisecondsInMinute;\n\n  const timezoneOffset =\n    getTimezoneOffsetInMilliseconds(earlierDate_) -\n    getTimezoneOffsetInMilliseconds(laterDate_);\n\n  // Use DST-normalized difference in minutes for years, months and days;\n  // use regular difference in minutes for hours, minutes and seconds.\n  const dstNormalizedMinutes =\n    (milliseconds - timezoneOffset) / millisecondsInMinute;\n\n  const defaultUnit = options?.unit;\n  let unit;\n  if (!defaultUnit) {\n    if (minutes < 1) {\n      unit = "second";\n    } else if (minutes < 60) {\n      unit = "minute";\n    } else if (minutes < minutesInDay) {\n      unit = "hour";\n    } else if (dstNormalizedMinutes < minutesInMonth) {\n      unit = "day";\n    } else if (dstNormalizedMinutes < minutesInYear) {\n      unit = "month";\n    } else {\n      unit = "year";\n    }\n  } else {\n    unit = defaultUnit;\n  }\n\n  // 0 up to 60 seconds\n  if (unit === "second") {\n    const seconds = roundingMethod(milliseconds / 1000);\n    return locale.formatDistance("xSeconds", seconds, localizeOptions);\n\n    // 1 up to 60 mins\n  } else if (unit === "minute") {\n    const roundedMinutes = roundingMethod(minutes);\n    return locale.formatDistance("xMinutes", roundedMinutes, localizeOptions);\n\n    // 1 up to 24 hours\n  } else if (unit === "hour") {\n    const hours = roundingMethod(minutes / 60);\n    return locale.formatDistance("xHours", hours, localizeOptions);\n\n    // 1 up to 30 days\n  } else if (unit === "day") {\n    const days = roundingMethod(dstNormalizedMinutes / minutesInDay);\n    return locale.formatDistance("xDays", days, localizeOptions);\n\n    // 1 up to 12 months\n  } else if (unit === "month") {\n    const months = roundingMethod(dstNormalizedMinutes / minutesInMonth);\n    return months === 12 && defaultUnit !== "month"\n      ? locale.formatDistance("xYears", 1, localizeOptions)\n      : locale.formatDistance("xMonths", months, localizeOptions);\n\n    // 1 year up to max Date\n  } else {\n    const years = roundingMethod(dstNormalizedMinutes / minutesInYear);\n    return locale.formatDistance("xYears", years, localizeOptions);\n  }\n}\n\n// Fallback for modularized imports:\n/* harmony default export */ const date_fns_formatDistanceStrict = ((/* unused pure expression or super */ null && (formatDistanceStrict)));\n\n;// ./node_modules/date-fns/formatDistanceToNowStrict.js\n\n\n\n\n/**\n * The {@link formatDistanceToNowStrict} function options.\n */\n\n/**\n * @name formatDistanceToNowStrict\n * @category Common Helpers\n * @summary Return the distance between the given date and now in words.\n * @pure false\n *\n * @description\n * Return the distance between the given dates in words, using strict units.\n * This is like `formatDistance`, but does not use helpers like \'almost\', \'over\',\n * \'less than\' and the like.\n *\n * | Distance between dates | Result              |\n * |------------------------|---------------------|\n * | 0 ... 59 secs          | [0..59] seconds     |\n * | 1 ... 59 mins          | [1..59] minutes     |\n * | 1 ... 23 hrs           | [1..23] hours       |\n * | 1 ... 29 days          | [1..29] days        |\n * | 1 ... 11 months        | [1..11] months      |\n * | 1 ... N years          | [1..N]  years       |\n *\n * @param date - The given date\n * @param options - An object with options.\n *\n * @returns The distance in words\n *\n * @throws `date` must not be Invalid Date\n * @throws `options.locale` must contain `formatDistance` property\n *\n * @example\n * // If today is 1 January 2015, what is the distance to 2 July 2014?\n * const result = formatDistanceToNowStrict(\n *   new Date(2014, 6, 2)\n * )\n * //=> \'6 months\'\n *\n * @example\n * // If now is 1 January 2015 00:00:00,\n * // what is the distance to 1 January 2015 00:00:15, including seconds?\n * const result = formatDistanceToNowStrict(\n *   new Date(2015, 0, 1, 0, 0, 15)\n * )\n * //=> \'15 seconds\'\n *\n * @example\n * // If today is 1 January 2015,\n * // what is the distance to 1 January 2016, with a suffix?\n * const result = formatDistanceToNowStrict(\n *   new Date(2016, 0, 1),\n *   {addSuffix: true}\n * )\n * //=> \'in 1 year\'\n *\n * @example\n * // If today is 28 January 2015,\n * // what is the distance to 1 January 2015, in months, rounded up??\n * const result = formatDistanceToNowStrict(new Date(2015, 0, 1), {\n *   unit: \'month\',\n *   roundingMethod: \'ceil\'\n * })\n * //=> \'1 month\'\n *\n * @example\n * // If today is 1 January 2015,\n * // what is the distance to 1 January 2016 in Esperanto?\n * const eoLocale = require(\'date-fns/locale/eo\')\n * const result = formatDistanceToNowStrict(\n *   new Date(2016, 0, 1),\n *   {locale: eoLocale}\n * )\n * //=> \'1 jaro\'\n */\nfunction formatDistanceToNowStrict(date, options) {\n  return formatDistanceStrict(date, constructNow(date), options);\n}\n\n// Fallback for modularized imports:\n/* harmony default export */ const date_fns_formatDistanceToNowStrict = ((/* unused pure expression or super */ null && (formatDistanceToNowStrict)));\n\n;// ./src/ui/renderer.js\n\n\nfunction displayProject(project, mainArea, handlers = {}) {\n\tif (!mainArea) return;\n\tmainArea.innerHTML = ""; \n\n\tconst heading = document.createElement("h1");\n\theading.className = "text-2xl font-bold mb-4";\n\theading.textContent = project.title;\n\tmainArea.appendChild(heading);\n\n\tif (!project.TaskList) return; \n\t// rendering each task\n\tproject.TaskList.forEach((task, idx) => {\n\t\t// wrapper is a flex row: task card on the left, controls on the right\n\t\tconst wrapper = document.createElement("div"); \n\t\t// base classes for layout\n\t\tconst baseWrapper = "rounded-lg shadow p-4 mb-3 flex items-start justify-between gap-5";\n\t\t// darker background when completed, keep text readable\n\t\tconst stateClasses = task.completed ? "bg-green-800 text-white" : "bg-white text-black";\n\t\twrapper.className = `${baseWrapper} ${stateClasses}`;\n\n\t\tconst card = document.createElement("div");\n\t\tcard.className = "flex-1 bg-transparent text-left cursor-pointer";\n\t\t// use handler passed in instead of global editTask\n\t\tcard.addEventListener("click", () => { if (typeof handlers.editTask === \'function\') handlers.editTask(idx); });\n\n\t\tconst titleEl = document.createElement("div");\n\t\ttitleEl.className = "text-lg font-semibold";\n\t\t// ensure title color contrasts when completed\n\t\ttitleEl.className += task.completed ? " text-white" : " text-gray-800";\n\t\ttitleEl.textContent = task.title;\n\n\t\tconst detailsEl = document.createElement("div");\n\t\tdetailsEl.className = "text-sm mt-1";\n\t\tdetailsEl.className += task.completed ? " text-gray-200" : " text-gray-600";\n\t\tdetailsEl.textContent = task.details || "No details";\n\n\t\t// Priority pill styled to match modal pills\n\t\tconst prioritySpan = document.createElement("span");\n\t\tprioritySpan.className = "px-3 py-1 rounded-full text-sm inline-block mt-2";\n\t\tif (task.priority) {\n\t\t\tconst p = task.priority.toLowerCase();\n\t\t\tif (p === \'critical\') prioritySpan.className += \' bg-red-600\';\n\t\t\telse if (p === \'important\') prioritySpan.className += \' bg-yellow-600\';\n\t\t\telse if (p === \'desirable\') prioritySpan.className += \' bg-blue-600\';\n\t\t\telse prioritySpan.className += \' bg-gray-600\';\n\t\t\t// set text color to contrast with wrapper text color\n\t\t\tprioritySpan.className += task.completed ? \' text-black\' : \' text-white\';\n\t\t\t// display readable label\n\t\t\tprioritySpan.textContent = task.priority.charAt(0).toUpperCase() + task.priority.slice(1);\n\t\t} else {\n\t\t\tprioritySpan.textContent = \'\';\n\t\t}\n\n\t\t// Deadline display + time-left (friendly)\n\t\tconst deadlineWrap = document.createElement(\'div\');\n\t\tdeadlineWrap.className = \'mt-2 text-sm flex flex-col\';\n\t\tif (task.time) {\n\t\t\tconst deadlineEl = document.createElement(\'div\');\n\t\t\tdeadlineEl.className = task.completed ? \'text-gray-200\' : \'text-sm text-gray-700\';\n\t\t\tdeadlineEl.textContent = task.getDate();\n\n\t\t\tconst timeLeftEl = document.createElement(\'div\');\n\t\t\ttimeLeftEl.className = task.completed ? \'text-xs text-gray-300\' : \'text-xs text-gray-500\';\n\t\t\ttry {\n\t\t\t\ttimeLeftEl.textContent = formatDistanceToNowStrict(new Date(task.time), { addSuffix: true });\n\t\t\t} catch (err) {\n\t\t\t\ttimeLeftEl.textContent = \'\';\n\t\t\t}\n\n\t\t\tdeadlineWrap.appendChild(deadlineEl);\n\t\t\tdeadlineWrap.appendChild(timeLeftEl);\n\t\t}\n\n\t\t// button column aligned to the right\n\t\tlet buttonWrapper = document.createElement("div"); \n\t\tbuttonWrapper.className = "flex flex-col items-end space-y-2";\n\n\t\tlet deleteButton = document.createElement("button"); \n\t\tdeleteButton.textContent = "Delete";\n\t\tdeleteButton.onclick = () => { if (typeof handlers.deleteTask === \'function\') handlers.deleteTask(idx); };\n\t\tdeleteButton.className = "px-3 py-1 rounded-md hover:opacity-90";\n\t\t// contrast-aware delete button color\n\t\tdeleteButton.className += task.completed ? " bg-red-600 text-white" : " bg-red-500 text-white";\n\n\t\tlet completeButton = document.createElement("button"); \n\t\tcompleteButton.textContent = task.completed ? "Unfinish" : "Finished"; \n\t\tcompleteButton.onclick = () => { if (typeof handlers.completeTask === \'function\') handlers.completeTask(idx); };\n\t\tcompleteButton.className = "px-3 py-1 rounded-md hover:opacity-90";\n\t\t// different color when toggling completion\n\t\tcompleteButton.className += task.completed ? " bg-yellow-400 text-black" : " bg-green-500 text-white";\n\n\t\tbuttonWrapper.appendChild(deleteButton); \n\t\tbuttonWrapper.appendChild(completeButton); \n\n\t\tcard.appendChild(titleEl);\n\t\tcard.appendChild(detailsEl);\n\t\tif (prioritySpan.textContent) card.appendChild(prioritySpan);\n\t\tif (deadlineWrap.children.length) card.appendChild(deadlineWrap);\n\t\twrapper.appendChild(card); \n\t\twrapper.appendChild(buttonWrapper);\n\t\tmainArea.appendChild(wrapper);\n\t});\n}\n\n;// ./src/index.js\n\n\n\n\n\n// DOM\nconst sideBar = document.getElementById("sideBar");\nconst mainArea = document.getElementById("mainArea");\n\n// ADD TASK UI\nconst addTask = document.getElementById("addTask");\nconst popUp = document.getElementById("popup-addTask");\nconst closePopUp = document.getElementById("closePopUp");\nconst editForm = document.getElementById("editForm");\nconst taskInput = document.getElementById("taskInput");\nconst taskDetails = document.getElementById("taskDetails");\nconst priorities = document.querySelectorAll(\'input[name="priority"]\');\nconst timeInput = document.getElementById("time");\n\n// PROJECT UI\nconst addProject = document.getElementById("addProject");\nconst projectPopUp = document.getElementById("popup-addProject");\nconst closeProjectPopup = document.getElementById("closeProjectPopup");\nconst projectForm = document.getElementById("projectForm");\nconst projectInput = document.getElementById("projectInput");\nconst home = document.getElementById("home");\n\n// App state\nlet projectList = [];\nlet currProject = 0;\n\n// Form state\nlet chosenPriority = null;\nlet isEditing = false;\nlet editingIndex = null;\n\nlet isProjectEditing = false;\nlet projectEditingIndex = null;\n\n// Wire simple UI actions\naddTask && addTask.addEventListener("click", showPopUp);\nclosePopUp && closePopUp.addEventListener("click", closePopUpFunc);\naddProject && addProject.addEventListener("click", showProjectPopUp);\ncloseProjectPopup && closeProjectPopup.addEventListener("click", closeProjectPopUpFunc);\n\n// priority radios\npriorities.forEach(priority => {\n    priority.addEventListener("change", (e) => {\n        chosenPriority = e.target.value;\n    });\n});\n\n// Edit task form\neditForm && editForm.addEventListener("submit", (e) => {\n    e.preventDefault();\n    const title = taskInput.value.trim();\n    const details = taskDetails.value.trim();\n    const taskPriority = chosenPriority;\n\n    if (!title) {\n        taskInput.focus();\n        return;\n    }\n\n    if (isEditing && editingIndex !== null) {\n        const task = projectList[currProject].TaskList[editingIndex];\n        if (task) {\n            task.title = title;\n            task.details = details;\n            task.priority = taskPriority || task.priority;\n            if (timeInput && timeInput.value) task.time = new Date(timeInput.value);\n        }\n        isEditing = false;\n        editingIndex = null;\n        displayProject(projectList[currProject], mainArea, { editTask, deleteTask, completeTask });\n    } else {\n        appendTask(title, details, taskPriority, timeInput && timeInput.value);\n    }\n\n    // clear form\n    taskInput.value = "";\n    taskDetails.value = "";\n    chosenPriority = null;\n    priorities.forEach(p => p.checked = false);\n    if (timeInput) timeInput.value = "";\n    closePopUpFunc();\n});\n\n// Edit project form\nprojectForm && projectForm.addEventListener("submit", (e) => {\n    e.preventDefault();\n    const title = projectInput.value.trim();\n    if (!title) {\n        projectInput.focus();\n        return;\n    }\n\n    if (isProjectEditing && projectEditingIndex !== null) {\n        const project = projectList[projectEditingIndex];\n        if (project) project.title = title;\n        isProjectEditing = false;\n        projectEditingIndex = null;\n        displayProject(projectList[currProject], mainArea, { editTask, deleteTask, completeTask });\n    } else {\n        addProjectFunc(title);\n    }\n\n    projectInput.value = "";\n    closeProjectPopUpFunc();\n});\n\n// Task helpers\nfunction showPopUp() { popUp && popUp.classList.remove("hidden"); }\nfunction closePopUpFunc() { popUp && popUp.classList.add("hidden"); }\n\nfunction editTask(taskIndex) {\n    const task = projectList[currProject].TaskList[taskIndex];\n    if (!task) return;\n    taskInput.value = task.title;\n    taskDetails.value = task.details || "";\n    if (task.priority) {\n        chosenPriority = task.priority;\n        const radio = document.querySelector(`input[name="priority"][value="${task.priority}"]`);\n        if (radio) radio.checked = true;\n    } else {\n        chosenPriority = null;\n        priorities.forEach(p => p.checked = false);\n    }\n    if (task.time) {\n        const t = new Date(task.time);\n        const iso = t.toISOString();\n        timeInput.value = iso.substring(0,16);\n    } else if (timeInput) {\n        timeInput.value = "";\n    }\n    isEditing = true;\n    editingIndex = taskIndex;\n    closeProjectPopUpFunc();\n    showPopUp();\n}\n\nfunction appendTask(title, details, priority, timeVal) {\n    const task = new Task(title, details, priority, timeVal);\n    projectList[currProject].addTask(task);\n    displayProject(projectList[currProject], mainArea, { editTask, deleteTask, completeTask });\n}\n\nfunction deleteTask(taskIdx) {\n    // remove the task from the current project\'s TaskList\n    if (!projectList[currProject]) return;\n    projectList[currProject].TaskList.splice(taskIdx, 1);\n    displayProject(projectList[currProject], mainArea, { editTask, deleteTask, completeTask });\n}\n\nfunction completeTask(taskIdx) {\n    const task = projectList[currProject] && projectList[currProject].TaskList[taskIdx];\n    if (!task) return;\n    task.completed = !task.completed;\n    displayProject(projectList[currProject], mainArea, { editTask, deleteTask, completeTask });\n}\n\n// Project helpers\nfunction showProjectPopUp() { projectPopUp && projectPopUp.classList.remove("hidden"); }\nfunction closeProjectPopUpFunc() { projectPopUp && projectPopUp.classList.add("hidden"); }\n\nfunction addProjectFunc(title) {\n    const projectIdx = projectList.length;\n    const project = new Project("project " + title);\n    projectList.push(project);\n\n    const newProjectEl = document.createElement("div");\n    newProjectEl.className = "px-3 py-2 bg-white text-black rounded-md shadow cursor-pointer text-center my-1";\n    newProjectEl.setAttribute(\'tabindex\', \'0\');\n\n    const header = document.createElement("span");\n    header.textContent = "Project " + title;\n    header.addEventListener("dblclick", () => editProject(projectIdx));\n    newProjectEl.appendChild(header);\n\n    newProjectEl.addEventListener("click", () => changeProject(projectIdx));\n    newProjectEl.addEventListener(\'keydown\', (e) => { if (e.key === \'Enter\' || e.key === \' \') changeProject(projectIdx); });\n\n    sideBar && sideBar.appendChild(newProjectEl);\n}\n\nfunction changeProject(projectIdx) {\n    currProject = projectIdx;\n    displayProject(projectList[currProject], mainArea, { editTask, deleteTask, completeTask });\n}\n\nfunction editProject(projectIdx) {\n    const project = projectList[projectIdx];\n    if (!project) return;\n    projectInput.value = project.title;\n    isProjectEditing = true;\n    projectEditingIndex = projectIdx;\n    closePopUpFunc();\n    showProjectPopUp();\n}\n\n// Initialize app with a home project and render\n(function init() {\n    const homeProject = new Project("home");\n    projectList.push(homeProject);\n\n    // style and wire existing home element if present\n    if (home) {\n        home.className = "px-4 py-2 bg-white text-black rounded-md shadow cursor-pointer text-center";\n        home.setAttribute(\'tabindex\', \'0\');\n        home.addEventListener("click", () => changeProject(0));\n        home.addEventListener(\'keydown\', (e) => { if (e.key === \'Enter\' || e.key === \' \') changeProject(0); });\n    } else {\n        // if no dedicated home element, create a simple entry in sidebar\n        const h = document.createElement(\'div\');\n        h.className = "px-4 py-2 bg-white text-black rounded-md shadow cursor-pointer text-center";\n        h.setAttribute(\'tabindex\', \'0\');\n        h.textContent = "Home";\n        h.addEventListener("click", () => changeProject(0));\n        sideBar && sideBar.appendChild(h);\n    }\n\n    displayProject(projectList[currProject], mainArea, { editTask, deleteTask, completeTask });\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///147\n\n}')}},__webpack_exports__={};__webpack_modules__[147]()})();